# Yuroku（湯録）アプリケーション開発ルール

```cursorrules
# Yuroku（湯録）開発ルール

## 1. コーディング規約

### 1.1 Go バックエンド
- パッケージ名は小文字で、単語の区切りなし（例: `handlers`, `domain`, `usecase`）
- 変数名・関数名はキャメルケース（例: `userID`, `GetOnsenLog`）
- エクスポートする関数・変数は大文字始まり、非公開は小文字始まり
- エラー処理は必ず行い、適切なエラーメッセージを返す
- コメントは関数の上部に記述し、何をするかを明確に説明する
- 複雑なロジックには行コメントを追加する
- テストコードは必ず作成する（カバレッジ70%以上）
- 依存性の方向は外側から内側へ（依存性逆転の原則）
- インターフェースを活用し、実装の詳細を隠蔽する

### 1.2 React/Next.js フロントエンド
- コンポーネント名はパスカルケース（例: `OnsenCard`, `LoginForm`）
- 変数・関数名はキャメルケース（例: `onsenData`, `handleSubmit`）
- コンポーネントは機能ごとに分割し、1ファイル300行以内に収める
- CSS-in-JSまたはTailwind CSSを一貫して使用する
- 状態管理はReact Hooksを基本とし、必要に応じてContextAPIを使用
- 非同期処理はasync/awaitを使用し、try-catchでエラーハンドリングする
- コンポーネントのpropsには必ずPropTypesまたはTypeScriptの型定義を行う

## 2. プロジェクト構成

### 2.1 バックエンド（Go + Gin + クリーンアーキテクチャ）
```
backend/
├── cmd/
│   └── api/
│       └── main.go       # エントリーポイント
├── internal/
│   ├── domain/           # エンティティとビジネスルール
│   │   ├── entity/       # ドメインエンティティ
│   │   ├── repository/   # リポジトリインターフェース
│   │   └── service/      # ドメインサービス
│   ├── usecase/          # ユースケース（アプリケーションロジック）
│   │   ├── interactor/   # ユースケース実装
│   │   └── port/         # 入出力ポート
│   ├── adapter/          # アダプター層
│   │   ├── controller/   # コントローラー
│   │   ├── gateway/      # リポジトリ実装
│   │   ├── presenter/    # プレゼンター
│   │   └── validator/    # バリデーター
│   ├── infrastructure/   # インフラストラクチャ層
│   │   ├── config/       # 設定
│   │   ├── database/     # データベース接続
│   │   ├── router/       # ルーティング
│   │   ├── middleware/   # ミドルウェア
│   │   └── storage/      # ストレージ
│   └── common/           # 共通ユーティリティ
├── pkg/                  # 外部パッケージ
├── tests/                # テストコード
├── go.mod
└── go.sum
```

### 2.2 フロントエンド（Next.js）
```
frontend/
├── components/           # 再利用可能なコンポーネント
│   ├── common/           # 共通コンポーネント
│   ├── layout/           # レイアウト関連
│   └── onsen/            # 温泉関連コンポーネント
├── hooks/                # カスタムフック
├── pages/                # ページコンポーネント
│   ├── api/              # APIルート
│   ├── auth/             # 認証関連ページ
│   └── onsen/            # 温泉関連ページ
├── public/               # 静的ファイル
├── styles/               # グローバルスタイル
├── utils/                # ユーティリティ関数
├── contexts/             # Contextプロバイダー
├── services/             # APIサービス
└── types/                # 型定義
```

## 3. クリーンアーキテクチャの原則

### 3.1 レイヤー構造
- **ドメイン層**: ビジネスエンティティとルール（最も内側）
- **ユースケース層**: アプリケーションのビジネスロジック
- **アダプター層**: 外部とのインターフェース（コントローラー、ゲートウェイ）
- **インフラストラクチャ層**: フレームワーク、ドライバー、ツール（最も外側）

### 3.2 依存関係のルール
- 内側のレイヤーは外側のレイヤーを知らない
- 依存の方向は常に内側に向かう
- 外側から内側への依存は依存性逆転の原則で解決
- ドメインエンティティは外部ライブラリに依存しない

### 3.3 インターフェース分離
- リポジトリはインターフェースとして定義し、実装は外側のレイヤーで行う
- ユースケースの入出力はポートとして定義
- 各レイヤー間の通信はDTOを使用

## 4. データベース規約

### 4.1 MongoDB コレクション命名
- コレクション名は複数形、スネークケース（例: `users`, `onsen_logs`, `onsen_images`）
- インデックスは適切に設定し、クエリパフォーマンスを最適化する
- 頻繁に検索するフィールドにはインデックスを作成する

### 4.2 ドキュメント構造
- IDフィールドは `_id` を使用（MongoDBのデフォルト）
- 日時フィールドは ISO 8601 形式で保存
- 外部参照は ObjectId を使用
- 配列フィールドは適切な場合のみ使用し、無限に増加しないよう注意

## 5. API設計規約

### 5.1 エンドポイント命名
- RESTful原則に従う
- 複数形の名詞を使用（例: `/onsen_logs`, `/users`）
- ネストしたリソースはスラッシュで区切る（例: `/onsen_logs/{id}/images`）
- バージョニングはURLに含める（例: `/v1/onsen_logs`）

### 5.2 レスポンス形式
- 成功レスポンスは一貫した構造を持つ
```json
{
  "data": { ... },
  "message": "操作成功メッセージ"
}
```
- エラーレスポンスも一貫した構造を持つ
```json
{
  "error": {
    "code": "ERROR_CODE",
    "message": "エラーメッセージ"
  }
}
```
- HTTPステータスコードを適切に使用する
  - 200: 成功
  - 201: 作成成功
  - 400: 不正なリクエスト
  - 401: 認証エラー
  - 403: 権限エラー
  - 404: リソース未発見
  - 500: サーバーエラー

## 6. セキュリティ規約

### 6.1 認証・認可
- JWTトークンの有効期限は短く設定（アクセストークン: 15分、リフレッシュトークン: 7日）
- パスワードはbcryptでハッシュ化し、ソルトを使用
- 認証が必要なエンドポイントは必ずミドルウェアでチェック
- CSRF対策としてトークンを使用

### 6.2 データ検証
- ユーザー入力は必ずバリデーションを行う
- SQLインジェクション対策としてパラメータ化クエリを使用
- XSS対策としてユーザー入力をエスケープ
- ファイルアップロードは拡張子・サイズ・MIMEタイプを検証

## 7. テスト規約

### 7.1 バックエンドテスト
- ユニットテスト: 各レイヤーの独立したテスト
  - ドメイン層: エンティティとドメインサービスのテスト
  - ユースケース層: ビジネスロジックのテスト（モックリポジトリ使用）
  - アダプター層: コントローラーとゲートウェイのテスト
- 統合テスト: 複数レイヤーを跨いだテスト
- E2Eテスト: APIエンドポイントの動作検証

### 7.2 フロントエンドテスト
- コンポーネントテスト: React Testing Libraryを使用
- E2Eテスト: Cypress/Playwrightを使用
- ユーザーフローを網羅するシナリオテストを作成

## 8. デプロイメント規約

### 8.1 CI/CD
- GitHub Actionsでテスト・ビルド・デプロイを自動化
- mainブランチへのマージ前に必ずテストを実行
- デプロイ前にセキュリティスキャンを実行

### 8.2 環境変数
- 機密情報は環境変数として管理
- 開発・テスト・本番環境で異なる設定を使用
- 環境変数のサンプルファイルをリポジトリに含める（実際の値は含めない）

## 9. ドキュメント規約

### 9.1 コード内ドキュメント
- 公開APIには必ずドキュメントコメントを記述
- 複雑なロジックには説明コメントを追加
- TODOコメントには担当者と期限を記載

### 9.2 外部ドキュメント
- README.mdにプロジェクト概要・セットアップ手順を記載
- API仕様書はSwagger/OpenAPIで作成
- アーキテクチャ図・ER図を最新に保つ

## 10. パフォーマンス最適化

### 10.1 バックエンド
- N+1問題を避けるためにクエリを最適化
- 大量データの取得にはページネーションを実装
- キャッシュを適切に活用（Redis等）

### 10.2 フロントエンド
- 画像は最適化して使用（WebP形式、適切なサイズ）
- コンポーネントの不要な再レンダリングを防ぐ
- バンドルサイズを最小化（コード分割、ツリーシェイキング）

## 11. コミュニケーション規約

### 11.1 コミットメッセージ
- 接頭辞を使用して種類を示す（feat:, fix:, docs:, style:, refactor:, test:, chore:）
- 簡潔かつ明確に変更内容を説明
- 関連するIssue番号を記載

### 11.2 プルリクエスト
- 目的と変更内容を明確に説明
- レビュアーを指定
- チェックリストを含める（テスト実行済み、リンター通過等）
```
